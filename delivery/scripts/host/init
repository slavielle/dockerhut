#!/bin/bash

# This script is a part of Shore
# MIT License
# Copyright (c) 2016 Sylvain LAVIELLE


. .shore/scripts/host/_common.sh

include_files

if [[ $RT_CONTAINER_ID_INITIALIZED ]]; then
    echo "Container already initialized : $RT_CONTAINER_ID_INITIALIZED"
else

    echo "Pulling image "

    docker pull $CONF_IMAGE_ID

    echo ""
    echo "Initializing container using following settings:"
    echo ""

    # Remove the entrypoint (symlink to a real entrypoint script)
    rm ".shore/scripts/container/entrypoint" 2> /dev/null

    # Set the entrypoint symlink pointing to "init" script
    ln -s _init ".shore/scripts/container/entrypoint"

    # Set the PROJECT_DIR : project root that will be sared with container
    PROJECT_DIR="$( pwd )"

    printf "  > project directory: "; if [ "$PROJECT_DIR" ]; then printf "$PROJECT_DIR\n"; else printf "<not-set>\n"; fi
    printf "  > network: "; if [ "$CONF_CONTAINER_NETWORK" ]; then printf "$CONF_CONTAINER_NETWORK\n"; else printf "<not-set>\n"; fi
    printf "  > project name: "; if [ "$CONF_PROJECT_NAME" ]; then printf "$CONF_PROJECT_NAME\n"; else printf "<not-set>\n"; fi
    printf "  > container IP: "; if [ "$CONF_CONTAINER_IP" ]; then printf "$CONF_CONTAINER_IP\n"; else printf "<not-set>\n"; fi
    printf "  > image ID: "; if [ "$CONF_IMAGE_ID" ]; then printf "$CONF_IMAGE_ID\n"; else printf "<not-set>\n"; fi
    echo ""

    if [ "$PROJECT_DIR" ] && [ "$CONF_CONTAINER_NETWORK" ] && [ "$CONF_PROJECT_NAME" ] && [ "$CONF_CONTAINER_IP" ] && [ "$CONF_IMAGE_ID" ]; then

        # Resolve port mapping option for docker run
        [ -n "$CONF_PROJECT_OTHER_PORTS_MAP" ] && PROJECT_PORT_MAP=("${CONF_PROJECT_OTHER_PORTS_MAP[@]}") || PROJECT_PORT_MAP=()
        [ -n "$CONF_PROJECT_HTTP_PORT_MAP" ] && PROJECT_PORT_MAP+=("$CONF_PROJECT_HTTP_PORT_MAP")
        PORTS_EXPORT_OPTION_STRING=""
        for ONE_PORT_MAP in "${PROJECT_PORT_MAP[@]}"; do
            PORTS_EXPORT_OPTION_STRING="$PORTS_EXPORT_OPTION_STRING -p $ONE_PORT_MAP"
        done

        # Call the docker run to create the container
        OUT=$(docker run -it $PORTS_EXPORT_OPTION_STRING -v $PROJECT_DIR:/home/$CONF_PROJECT_NAME --cidfile=".shore/tmp/cid" --net $CONF_CONTAINER_NETWORK --ip $CONF_CONTAINER_IP $CONF_IMAGE_ID /home/$CONF_PROJECT_NAME/.shore/scripts/container/entrypoint 2>&1)

        # Get the container ID
        CIDOUT=$(cat ".shore/tmp/cid" 2> /dev/null)
        rm ".shore/tmp/cid" 2> /dev/null

        # When container ID look good
        if [[ $CIDOUT =~ ^[0-9a-f]+$ ]]; then

            # Report message on success
            echo "container $CIDOUT initialized"

            # Get current user 
            if [[ "$(uname)" == "Darwin" ]]; then
                CURRENT_USER=$(stat -f %Su .shore)
            else
                CURRENT_USER=$(stat -c %U .shore)
            fi

            # Store runtime variables
            echo "RT_CONTAINER_ID_INITIALIZED=\"$CIDOUT\"" > ".shore/runtime/RT_CONTAINER_ID_INITIALIZED.var.sh"
            echo "RT_INIT_USER=\"$CURRENT_USER\"" > ".shore/runtime/RT_INIT_USER.var.sh"
            echo "RT_HOST_SHARED_DIR_PATH=\"$PROJECT_DIR\"" > ".shore/runtime/RT_HOST_SHARED_DIR_PATH.var.sh"

            # Set container-side "_start" script as entrypoint
            rm .shore/scripts/container/entrypoint
            ln -s _start .shore/scripts/container/entrypoint

            # Start the container
            docker start $CIDOUT > /dev/null

            # Execute the container "init" script
            docker exec -it $CIDOUT /home/$CONF_PROJECT_NAME/.shore/scripts/container/init $@

            # Stop the container
            docker stop $CIDOUT > /dev/null

        # When container ID looks not good
        else

            # Report message on error 
            echo "Oops, someting went wrong:"
            echo "$OUT"

        fi
    else
        echo "Some expected settings are not defined. Please edit files in .shore/settings to set setting values"
    fi
fi
